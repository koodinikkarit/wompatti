// Code generated by protoc-gen-go.
// source: wompatti_service.proto
// DO NOT EDIT!

package WompattiService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wompatti service

type WompattiClient interface {
	CreateComputer(ctx context.Context, in *CreateComputerRequest, opts ...grpc.CallOption) (*CreateComputerResponse, error)
	EditComputer(ctx context.Context, in *EditComputerRequest, opts ...grpc.CallOption) (*EditComputerResponse, error)
	RemoveComputer(ctx context.Context, in *RemoveComputerRequest, opts ...grpc.CallOption) (*RemoveComputerResponse, error)
	FetchComputers(ctx context.Context, in *FetchComputersRequest, opts ...grpc.CallOption) (Wompatti_FetchComputersClient, error)
	FetchComputerById(ctx context.Context, in *FetchComputerByIdRequest, opts ...grpc.CallOption) (Wompatti_FetchComputerByIdClient, error)
	FetchDeviceInfoById(ctx context.Context, in *FetchDeviceInfoByIdRequest, opts ...grpc.CallOption) (Wompatti_FetchDeviceInfoByIdClient, error)
	FetchKeyValuesByDeviceInfoId(ctx context.Context, in *FetchKeyValuesByDeviceInfoIdRequest, opts ...grpc.CallOption) (Wompatti_FetchKeyValuesByDeviceInfoIdClient, error)
	CreateKeyValue(ctx context.Context, in *CreateKeyValueRequest, opts ...grpc.CallOption) (*CreateKeyValueResponse, error)
	EditKeyValue(ctx context.Context, in *EditKeyValueRequest, opts ...grpc.CallOption) (*EditKeyValueResponse, error)
	RemoveKeyValue(ctx context.Context, in *RemoveKeyValueRequest, opts ...grpc.CallOption) (*RemoveKeyValueResponse, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	RemoveDevice(ctx context.Context, in *RemoveDeviceRequest, opts ...grpc.CallOption) (*RemoveDeviceResponse, error)
	FetchDevices(ctx context.Context, in *FetchDevicesRequest, opts ...grpc.CallOption) (Wompatti_FetchDevicesClient, error)
	FetchDeviceById(ctx context.Context, in *FetchDeviceByIdRequest, opts ...grpc.CallOption) (Wompatti_FetchDeviceByIdClient, error)
	FetchEthernetInterfaces(ctx context.Context, in *FetchEthernetInterfacesRequest, opts ...grpc.CallOption) (Wompatti_FetchEthernetInterfacesClient, error)
	CreateWolInterface(ctx context.Context, in *CreateWolInterfaceRequest, opts ...grpc.CallOption) (*CreateWolInterfaceResponse, error)
	EditWolInterface(ctx context.Context, in *EditWolInterfaceRequest, opts ...grpc.CallOption) (*EditWolInterfaceResponse, error)
	RemoveWolInterface(ctx context.Context, in *RemoveWolInterfaceRequest, opts ...grpc.CallOption) (*RemoveWolInterfaceResponse, error)
	ExecuteWolInterface(ctx context.Context, in *ExecuteWolInterfaceRequest, opts ...grpc.CallOption) (*ExecuteWolInterfaceResponse, error)
	FetchWolInterfaceById(ctx context.Context, in *FetchWolInterfaceByIdRequest, opts ...grpc.CallOption) (Wompatti_FetchWolInterfaceByIdClient, error)
	CreateDeviceType(ctx context.Context, in *CreateDeviceTypeRequest, opts ...grpc.CallOption) (*CreateDeviceTypeResponse, error)
	EditDeviceType(ctx context.Context, in *EditDeviceTypeRequest, opts ...grpc.CallOption) (*EditDeviceTypeResponse, error)
	RemoveDeviceType(ctx context.Context, in *RemoveDeviceTypeRequest, opts ...grpc.CallOption) (*RemoveDeviceTypeResponse, error)
	CreateCommand(ctx context.Context, in *CreateCommandRequest, opts ...grpc.CallOption) (*CreateCommandResponse, error)
	EditCommand(ctx context.Context, in *EditCommandRequest, opts ...grpc.CallOption) (*EditCommandReponse, error)
	RemoveCommand(ctx context.Context, in *RemoveCommandRequest, opts ...grpc.CallOption) (*RemoveCommandResponse, error)
}

type wompattiClient struct {
	cc *grpc.ClientConn
}

func NewWompattiClient(cc *grpc.ClientConn) WompattiClient {
	return &wompattiClient{cc}
}

func (c *wompattiClient) CreateComputer(ctx context.Context, in *CreateComputerRequest, opts ...grpc.CallOption) (*CreateComputerResponse, error) {
	out := new(CreateComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditComputer(ctx context.Context, in *EditComputerRequest, opts ...grpc.CallOption) (*EditComputerResponse, error) {
	out := new(EditComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveComputer(ctx context.Context, in *RemoveComputerRequest, opts ...grpc.CallOption) (*RemoveComputerResponse, error) {
	out := new(RemoveComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchComputers(ctx context.Context, in *FetchComputersRequest, opts ...grpc.CallOption) (Wompatti_FetchComputersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[0], c.cc, "/WompattiService.Wompatti/fetchComputers", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchComputersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchComputersClient interface {
	Recv() (*Computer, error)
	grpc.ClientStream
}

type wompattiFetchComputersClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchComputersClient) Recv() (*Computer, error) {
	m := new(Computer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) FetchComputerById(ctx context.Context, in *FetchComputerByIdRequest, opts ...grpc.CallOption) (Wompatti_FetchComputerByIdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[1], c.cc, "/WompattiService.Wompatti/fetchComputerById", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchComputerByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchComputerByIdClient interface {
	Recv() (*FetchComputerByIdResponse, error)
	grpc.ClientStream
}

type wompattiFetchComputerByIdClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchComputerByIdClient) Recv() (*FetchComputerByIdResponse, error) {
	m := new(FetchComputerByIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) FetchDeviceInfoById(ctx context.Context, in *FetchDeviceInfoByIdRequest, opts ...grpc.CallOption) (Wompatti_FetchDeviceInfoByIdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[2], c.cc, "/WompattiService.Wompatti/fetchDeviceInfoById", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchDeviceInfoByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchDeviceInfoByIdClient interface {
	Recv() (*FetchDeviceInfoByIdResponse, error)
	grpc.ClientStream
}

type wompattiFetchDeviceInfoByIdClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchDeviceInfoByIdClient) Recv() (*FetchDeviceInfoByIdResponse, error) {
	m := new(FetchDeviceInfoByIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) FetchKeyValuesByDeviceInfoId(ctx context.Context, in *FetchKeyValuesByDeviceInfoIdRequest, opts ...grpc.CallOption) (Wompatti_FetchKeyValuesByDeviceInfoIdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[3], c.cc, "/WompattiService.Wompatti/fetchKeyValuesByDeviceInfoId", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchKeyValuesByDeviceInfoIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchKeyValuesByDeviceInfoIdClient interface {
	Recv() (*FetchKeyValuesByDeviceInfoIdResponse, error)
	grpc.ClientStream
}

type wompattiFetchKeyValuesByDeviceInfoIdClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchKeyValuesByDeviceInfoIdClient) Recv() (*FetchKeyValuesByDeviceInfoIdResponse, error) {
	m := new(FetchKeyValuesByDeviceInfoIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) CreateKeyValue(ctx context.Context, in *CreateKeyValueRequest, opts ...grpc.CallOption) (*CreateKeyValueResponse, error) {
	out := new(CreateKeyValueResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createKeyValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditKeyValue(ctx context.Context, in *EditKeyValueRequest, opts ...grpc.CallOption) (*EditKeyValueResponse, error) {
	out := new(EditKeyValueResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editKeyValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveKeyValue(ctx context.Context, in *RemoveKeyValueRequest, opts ...grpc.CallOption) (*RemoveKeyValueResponse, error) {
	out := new(RemoveKeyValueResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeKeyValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveDevice(ctx context.Context, in *RemoveDeviceRequest, opts ...grpc.CallOption) (*RemoveDeviceResponse, error) {
	out := new(RemoveDeviceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchDevices(ctx context.Context, in *FetchDevicesRequest, opts ...grpc.CallOption) (Wompatti_FetchDevicesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[4], c.cc, "/WompattiService.Wompatti/fetchDevices", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchDevicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchDevicesClient interface {
	Recv() (*Device, error)
	grpc.ClientStream
}

type wompattiFetchDevicesClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchDevicesClient) Recv() (*Device, error) {
	m := new(Device)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) FetchDeviceById(ctx context.Context, in *FetchDeviceByIdRequest, opts ...grpc.CallOption) (Wompatti_FetchDeviceByIdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[5], c.cc, "/WompattiService.Wompatti/fetchDeviceById", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchDeviceByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchDeviceByIdClient interface {
	Recv() (*FetchDeviceByIdResponse, error)
	grpc.ClientStream
}

type wompattiFetchDeviceByIdClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchDeviceByIdClient) Recv() (*FetchDeviceByIdResponse, error) {
	m := new(FetchDeviceByIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) FetchEthernetInterfaces(ctx context.Context, in *FetchEthernetInterfacesRequest, opts ...grpc.CallOption) (Wompatti_FetchEthernetInterfacesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[6], c.cc, "/WompattiService.Wompatti/fetchEthernetInterfaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchEthernetInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchEthernetInterfacesClient interface {
	Recv() (*EthernetInterface, error)
	grpc.ClientStream
}

type wompattiFetchEthernetInterfacesClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchEthernetInterfacesClient) Recv() (*EthernetInterface, error) {
	m := new(EthernetInterface)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) CreateWolInterface(ctx context.Context, in *CreateWolInterfaceRequest, opts ...grpc.CallOption) (*CreateWolInterfaceResponse, error) {
	out := new(CreateWolInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createWolInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditWolInterface(ctx context.Context, in *EditWolInterfaceRequest, opts ...grpc.CallOption) (*EditWolInterfaceResponse, error) {
	out := new(EditWolInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editWolInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveWolInterface(ctx context.Context, in *RemoveWolInterfaceRequest, opts ...grpc.CallOption) (*RemoveWolInterfaceResponse, error) {
	out := new(RemoveWolInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeWolInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) ExecuteWolInterface(ctx context.Context, in *ExecuteWolInterfaceRequest, opts ...grpc.CallOption) (*ExecuteWolInterfaceResponse, error) {
	out := new(ExecuteWolInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/executeWolInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchWolInterfaceById(ctx context.Context, in *FetchWolInterfaceByIdRequest, opts ...grpc.CallOption) (Wompatti_FetchWolInterfaceByIdClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[7], c.cc, "/WompattiService.Wompatti/fetchWolInterfaceById", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchWolInterfaceByIdClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchWolInterfaceByIdClient interface {
	Recv() (*FetchWolInterfaceByIdResponse, error)
	grpc.ClientStream
}

type wompattiFetchWolInterfaceByIdClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchWolInterfaceByIdClient) Recv() (*FetchWolInterfaceByIdResponse, error) {
	m := new(FetchWolInterfaceByIdResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) CreateDeviceType(ctx context.Context, in *CreateDeviceTypeRequest, opts ...grpc.CallOption) (*CreateDeviceTypeResponse, error) {
	out := new(CreateDeviceTypeResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createDeviceType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditDeviceType(ctx context.Context, in *EditDeviceTypeRequest, opts ...grpc.CallOption) (*EditDeviceTypeResponse, error) {
	out := new(EditDeviceTypeResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editDeviceType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveDeviceType(ctx context.Context, in *RemoveDeviceTypeRequest, opts ...grpc.CallOption) (*RemoveDeviceTypeResponse, error) {
	out := new(RemoveDeviceTypeResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeDeviceType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateCommand(ctx context.Context, in *CreateCommandRequest, opts ...grpc.CallOption) (*CreateCommandResponse, error) {
	out := new(CreateCommandResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditCommand(ctx context.Context, in *EditCommandRequest, opts ...grpc.CallOption) (*EditCommandReponse, error) {
	out := new(EditCommandReponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveCommand(ctx context.Context, in *RemoveCommandRequest, opts ...grpc.CallOption) (*RemoveCommandResponse, error) {
	out := new(RemoveCommandResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wompatti service

type WompattiServer interface {
	CreateComputer(context.Context, *CreateComputerRequest) (*CreateComputerResponse, error)
	EditComputer(context.Context, *EditComputerRequest) (*EditComputerResponse, error)
	RemoveComputer(context.Context, *RemoveComputerRequest) (*RemoveComputerResponse, error)
	FetchComputers(*FetchComputersRequest, Wompatti_FetchComputersServer) error
	FetchComputerById(*FetchComputerByIdRequest, Wompatti_FetchComputerByIdServer) error
	FetchDeviceInfoById(*FetchDeviceInfoByIdRequest, Wompatti_FetchDeviceInfoByIdServer) error
	FetchKeyValuesByDeviceInfoId(*FetchKeyValuesByDeviceInfoIdRequest, Wompatti_FetchKeyValuesByDeviceInfoIdServer) error
	CreateKeyValue(context.Context, *CreateKeyValueRequest) (*CreateKeyValueResponse, error)
	EditKeyValue(context.Context, *EditKeyValueRequest) (*EditKeyValueResponse, error)
	RemoveKeyValue(context.Context, *RemoveKeyValueRequest) (*RemoveKeyValueResponse, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	RemoveDevice(context.Context, *RemoveDeviceRequest) (*RemoveDeviceResponse, error)
	FetchDevices(*FetchDevicesRequest, Wompatti_FetchDevicesServer) error
	FetchDeviceById(*FetchDeviceByIdRequest, Wompatti_FetchDeviceByIdServer) error
	FetchEthernetInterfaces(*FetchEthernetInterfacesRequest, Wompatti_FetchEthernetInterfacesServer) error
	CreateWolInterface(context.Context, *CreateWolInterfaceRequest) (*CreateWolInterfaceResponse, error)
	EditWolInterface(context.Context, *EditWolInterfaceRequest) (*EditWolInterfaceResponse, error)
	RemoveWolInterface(context.Context, *RemoveWolInterfaceRequest) (*RemoveWolInterfaceResponse, error)
	ExecuteWolInterface(context.Context, *ExecuteWolInterfaceRequest) (*ExecuteWolInterfaceResponse, error)
	FetchWolInterfaceById(*FetchWolInterfaceByIdRequest, Wompatti_FetchWolInterfaceByIdServer) error
	CreateDeviceType(context.Context, *CreateDeviceTypeRequest) (*CreateDeviceTypeResponse, error)
	EditDeviceType(context.Context, *EditDeviceTypeRequest) (*EditDeviceTypeResponse, error)
	RemoveDeviceType(context.Context, *RemoveDeviceTypeRequest) (*RemoveDeviceTypeResponse, error)
	CreateCommand(context.Context, *CreateCommandRequest) (*CreateCommandResponse, error)
	EditCommand(context.Context, *EditCommandRequest) (*EditCommandReponse, error)
	RemoveCommand(context.Context, *RemoveCommandRequest) (*RemoveCommandResponse, error)
}

func RegisterWompattiServer(s *grpc.Server, srv WompattiServer) {
	s.RegisterService(&_Wompatti_serviceDesc, srv)
}

func _Wompatti_CreateComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateComputer(ctx, req.(*CreateComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditComputer(ctx, req.(*EditComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveComputer(ctx, req.(*RemoveComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchComputers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchComputersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchComputers(m, &wompattiFetchComputersServer{stream})
}

type Wompatti_FetchComputersServer interface {
	Send(*Computer) error
	grpc.ServerStream
}

type wompattiFetchComputersServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchComputersServer) Send(m *Computer) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_FetchComputerById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchComputerByIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchComputerById(m, &wompattiFetchComputerByIdServer{stream})
}

type Wompatti_FetchComputerByIdServer interface {
	Send(*FetchComputerByIdResponse) error
	grpc.ServerStream
}

type wompattiFetchComputerByIdServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchComputerByIdServer) Send(m *FetchComputerByIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_FetchDeviceInfoById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchDeviceInfoByIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchDeviceInfoById(m, &wompattiFetchDeviceInfoByIdServer{stream})
}

type Wompatti_FetchDeviceInfoByIdServer interface {
	Send(*FetchDeviceInfoByIdResponse) error
	grpc.ServerStream
}

type wompattiFetchDeviceInfoByIdServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchDeviceInfoByIdServer) Send(m *FetchDeviceInfoByIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_FetchKeyValuesByDeviceInfoId_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchKeyValuesByDeviceInfoIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchKeyValuesByDeviceInfoId(m, &wompattiFetchKeyValuesByDeviceInfoIdServer{stream})
}

type Wompatti_FetchKeyValuesByDeviceInfoIdServer interface {
	Send(*FetchKeyValuesByDeviceInfoIdResponse) error
	grpc.ServerStream
}

type wompattiFetchKeyValuesByDeviceInfoIdServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchKeyValuesByDeviceInfoIdServer) Send(m *FetchKeyValuesByDeviceInfoIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_CreateKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateKeyValue(ctx, req.(*CreateKeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditKeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditKeyValue(ctx, req.(*EditKeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveKeyValue(ctx, req.(*RemoveKeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveDevice(ctx, req.(*RemoveDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchDevices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchDevicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchDevices(m, &wompattiFetchDevicesServer{stream})
}

type Wompatti_FetchDevicesServer interface {
	Send(*Device) error
	grpc.ServerStream
}

type wompattiFetchDevicesServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchDevicesServer) Send(m *Device) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_FetchDeviceById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchDeviceByIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchDeviceById(m, &wompattiFetchDeviceByIdServer{stream})
}

type Wompatti_FetchDeviceByIdServer interface {
	Send(*FetchDeviceByIdResponse) error
	grpc.ServerStream
}

type wompattiFetchDeviceByIdServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchDeviceByIdServer) Send(m *FetchDeviceByIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_FetchEthernetInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchEthernetInterfacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchEthernetInterfaces(m, &wompattiFetchEthernetInterfacesServer{stream})
}

type Wompatti_FetchEthernetInterfacesServer interface {
	Send(*EthernetInterface) error
	grpc.ServerStream
}

type wompattiFetchEthernetInterfacesServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchEthernetInterfacesServer) Send(m *EthernetInterface) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_CreateWolInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWolInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateWolInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateWolInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateWolInterface(ctx, req.(*CreateWolInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditWolInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditWolInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditWolInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditWolInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditWolInterface(ctx, req.(*EditWolInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveWolInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWolInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveWolInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveWolInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveWolInterface(ctx, req.(*RemoveWolInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_ExecuteWolInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteWolInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).ExecuteWolInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/ExecuteWolInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).ExecuteWolInterface(ctx, req.(*ExecuteWolInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchWolInterfaceById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchWolInterfaceByIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchWolInterfaceById(m, &wompattiFetchWolInterfaceByIdServer{stream})
}

type Wompatti_FetchWolInterfaceByIdServer interface {
	Send(*FetchWolInterfaceByIdResponse) error
	grpc.ServerStream
}

type wompattiFetchWolInterfaceByIdServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchWolInterfaceByIdServer) Send(m *FetchWolInterfaceByIdResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_CreateDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateDeviceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateDeviceType(ctx, req.(*CreateDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditDeviceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditDeviceType(ctx, req.(*EditDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveDeviceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveDeviceType(ctx, req.(*RemoveDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateCommand(ctx, req.(*CreateCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditCommand(ctx, req.(*EditCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveCommand(ctx, req.(*RemoveCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wompatti_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WompattiService.Wompatti",
	HandlerType: (*WompattiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createComputer",
			Handler:    _Wompatti_CreateComputer_Handler,
		},
		{
			MethodName: "editComputer",
			Handler:    _Wompatti_EditComputer_Handler,
		},
		{
			MethodName: "removeComputer",
			Handler:    _Wompatti_RemoveComputer_Handler,
		},
		{
			MethodName: "createKeyValue",
			Handler:    _Wompatti_CreateKeyValue_Handler,
		},
		{
			MethodName: "editKeyValue",
			Handler:    _Wompatti_EditKeyValue_Handler,
		},
		{
			MethodName: "removeKeyValue",
			Handler:    _Wompatti_RemoveKeyValue_Handler,
		},
		{
			MethodName: "createDevice",
			Handler:    _Wompatti_CreateDevice_Handler,
		},
		{
			MethodName: "removeDevice",
			Handler:    _Wompatti_RemoveDevice_Handler,
		},
		{
			MethodName: "createWolInterface",
			Handler:    _Wompatti_CreateWolInterface_Handler,
		},
		{
			MethodName: "editWolInterface",
			Handler:    _Wompatti_EditWolInterface_Handler,
		},
		{
			MethodName: "removeWolInterface",
			Handler:    _Wompatti_RemoveWolInterface_Handler,
		},
		{
			MethodName: "executeWolInterface",
			Handler:    _Wompatti_ExecuteWolInterface_Handler,
		},
		{
			MethodName: "createDeviceType",
			Handler:    _Wompatti_CreateDeviceType_Handler,
		},
		{
			MethodName: "editDeviceType",
			Handler:    _Wompatti_EditDeviceType_Handler,
		},
		{
			MethodName: "removeDeviceType",
			Handler:    _Wompatti_RemoveDeviceType_Handler,
		},
		{
			MethodName: "createCommand",
			Handler:    _Wompatti_CreateCommand_Handler,
		},
		{
			MethodName: "editCommand",
			Handler:    _Wompatti_EditCommand_Handler,
		},
		{
			MethodName: "removeCommand",
			Handler:    _Wompatti_RemoveCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "fetchComputers",
			Handler:       _Wompatti_FetchComputers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchComputerById",
			Handler:       _Wompatti_FetchComputerById_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchDeviceInfoById",
			Handler:       _Wompatti_FetchDeviceInfoById_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchKeyValuesByDeviceInfoId",
			Handler:       _Wompatti_FetchKeyValuesByDeviceInfoId_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchDevices",
			Handler:       _Wompatti_FetchDevices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchDeviceById",
			Handler:       _Wompatti_FetchDeviceById_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchEthernetInterfaces",
			Handler:       _Wompatti_FetchEthernetInterfaces_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchWolInterfaceById",
			Handler:       _Wompatti_FetchWolInterfaceById_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wompatti_service.proto",
}

func init() { proto.RegisterFile("wompatti_service.proto", fileDescriptor9) }

var fileDescriptor9 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0xb7, 0x1b, 0x84, 0xce, 0x4a, 0xb7, 0xb9, 0x1a, 0x83, 0x8a, 0xab, 0x42, 0xdb, 0xfd,
	0x81, 0x32, 0xf1, 0xe7, 0x05, 0x56, 0x8a, 0x54, 0x71, 0x45, 0x40, 0x54, 0x5c, 0xa0, 0x12, 0xd2,
	0x53, 0x35, 0x52, 0x1b, 0x87, 0xc4, 0xdd, 0x28, 0x2f, 0xc1, 0xc3, 0xf0, 0x82, 0xa8, 0x4e, 0xec,
	0x9d, 0xc4, 0x76, 0x13, 0x2e, 0xeb, 0xf3, 0xeb, 0xf7, 0x9d, 0x13, 0x7f, 0xb6, 0x0c, 0x0f, 0x6f,
	0xf9, 0x2a, 0xf6, 0x85, 0x08, 0xa7, 0x29, 0x26, 0x37, 0x61, 0x80, 0x83, 0x38, 0xe1, 0x82, 0xb3,
	0xc3, 0x49, 0xbe, 0xfe, 0x29, 0x5b, 0x6e, 0x37, 0x03, 0xbe, 0x8a, 0xd7, 0x02, 0x93, 0x0c, 0x68,
	0x1f, 0xcf, 0x70, 0xbb, 0x3e, 0x0d, 0xa3, 0x39, 0xcf, 0x97, 0x0e, 0xfc, 0x44, 0x88, 0x75, 0xfe,
	0xa3, 0x91, 0xd5, 0xf3, 0x5f, 0x8f, 0x50, 0x2c, 0x30, 0x89, 0x50, 0x4c, 0xc3, 0x48, 0x60, 0x32,
	0xf7, 0x75, 0xa5, 0x75, 0xcb, 0x97, 0xc6, 0xa2, 0x12, 0x17, 0x9b, 0x38, 0x5f, 0x7a, 0xf5, 0xf7,
	0x04, 0xee, 0xab, 0x9e, 0x58, 0x00, 0xcd, 0x20, 0x41, 0x5f, 0xe0, 0x30, 0x6f, 0x8a, 0xf5, 0x06,
	0xa5, 0x86, 0x07, 0xc3, 0x02, 0xe0, 0xe1, 0xcf, 0x35, 0xa6, 0xa2, 0xdd, 0xaf, 0xe4, 0xd2, 0x98,
	0x47, 0x29, 0x76, 0xf6, 0xd8, 0x37, 0x68, 0xe0, 0x2c, 0x14, 0xda, 0xe2, 0x99, 0xf1, 0xd7, 0x11,
	0x29, 0x2b, 0x83, 0x6e, 0x05, 0xa5, 0xe5, 0x03, 0x68, 0x26, 0xb8, 0xe2, 0x37, 0xbb, 0x66, 0xf0,
	0x0a, 0x80, 0x7b, 0x86, 0x32, 0xa7, 0x4d, 0x26, 0xd0, 0x9c, 0xa3, 0x08, 0x16, 0xaa, 0x94, 0x5a,
	0x4c, 0xde, 0x17, 0x00, 0x65, 0xf2, 0xd8, 0xfc, 0x50, 0x39, 0xd2, 0xd9, 0xbb, 0xda, 0x67, 0x11,
	0x1c, 0x17, 0x84, 0xaf, 0x37, 0xe3, 0x19, 0x3b, 0xdf, 0xad, 0xbd, 0x65, 0x94, 0xfc, 0x45, 0x1d,
	0x54, 0x8d, 0x71, 0xb5, 0xcf, 0x04, 0xb4, 0xa4, 0xdf, 0x3b, 0x19, 0x8c, 0x71, 0x34, 0xe7, 0xd2,
	0xf1, 0xd2, 0x2e, 0x53, 0xa4, 0x94, 0xe7, 0xf3, 0x7a, 0x30, 0x71, 0xfd, 0xb3, 0x0f, 0x4f, 0xa4,
	0xed, 0x07, 0xdc, 0x7c, 0xf1, 0x97, 0x6b, 0x4c, 0xaf, 0x37, 0x77, 0xf8, 0x78, 0xc6, 0xde, 0xd8,
	0x25, 0x1d, 0xb8, 0x6a, 0xe4, 0xed, 0x7f, 0xfe, 0x8b, 0x74, 0xa4, 0x93, 0xaf, 0x60, 0x67, 0xf2,
	0x15, 0x50, 0x95, 0xfc, 0x3b, 0xae, 0x9c, 0x7c, 0x6d, 0x61, 0x4f, 0x7e, 0xd9, 0xa0, 0x5b, 0x41,
	0x99, 0xc9, 0xdf, 0x31, 0x83, 0x57, 0x00, 0xaa, 0x92, 0x6f, 0x9f, 0x21, 0xfb, 0x50, 0xd9, 0xa7,
	0xb4, 0xcc, 0x30, 0x24, 0x65, 0xf7, 0x0c, 0x45, 0x8a, 0xca, 0x67, 0x33, 0x38, 0xe5, 0x3d, 0x52,
	0x76, 0xcb, 0x17, 0x29, 0x2d, 0xff, 0x11, 0x1a, 0x24, 0xee, 0xa9, 0x45, 0x9e, 0x44, 0x57, 0x9f,
	0xd9, 0x53, 0x83, 0xca, 0x00, 0x99, 0x9c, 0x05, 0x1c, 0x12, 0x49, 0x79, 0x7a, 0xfa, 0xbb, 0x54,
	0xe9, 0xc9, 0x39, 0xab, 0x06, 0x49, 0x46, 0x13, 0x38, 0x95, 0x4e, 0xa3, 0xfc, 0xce, 0x1f, 0xab,
	0xdb, 0x3d, 0x65, 0x2f, 0xed, 0x42, 0x26, 0xa9, 0x9c, 0x3b, 0x66, 0xa8, 0xca, 0xac, 0xf4, 0xe4,
	0xc0, 0xb2, 0xed, 0x9e, 0xf0, 0xa5, 0xae, 0xb0, 0x0b, 0xc7, 0x76, 0x52, 0x48, 0x39, 0x5d, 0xd6,
	0x62, 0xf5, 0x0e, 0x85, 0x70, 0xb4, 0x3d, 0x23, 0x05, 0xbb, 0x33, 0xeb, 0x09, 0xb0, 0x99, 0x9d,
	0xd7, 0x20, 0xb5, 0x15, 0x07, 0x96, 0x65, 0xad, 0x62, 0x36, 0xcf, 0x80, 0xdc, 0xb3, 0xd9, 0x58,
	0x6d, 0x98, 0x40, 0x0b, 0x7f, 0x61, 0xb0, 0x2e, 0x7d, 0x4d, 0x53, 0x65, 0x64, 0x52, 0xee, 0xcb,
	0xd6, 0x0a, 0x6b, 0xcf, 0xdf, 0x70, 0x22, 0x43, 0x43, 0xcb, 0x32, 0xa4, 0x2f, 0xec, 0x91, 0x29,
	0x73, 0xca, 0x77, 0x50, 0x17, 0x27, 0x81, 0x0d, 0xe1, 0x88, 0xde, 0x15, 0x9f, 0x37, 0xb1, 0x6d,
	0x2f, 0x87, 0x25, 0xc4, 0xbd, 0x97, 0x26, 0x49, 0xef, 0xbe, 0x6d, 0x6c, 0x88, 0x51, 0xcf, 0x1a,
	0x05, 0xd3, 0xa6, 0x5f, 0xc9, 0xd1, 0x6c, 0xd2, 0xcb, 0xc9, 0x31, 0x8f, 0x57, 0x42, 0xdc, 0xf3,
	0x98, 0xa4, 0xb6, 0xfa, 0x0e, 0x0f, 0xf4, 0x4b, 0x6c, 0xe5, 0x47, 0x33, 0xd6, 0x75, 0x3f, 0xb0,
	0xb6, 0x75, 0x65, 0xd2, 0xab, 0xc2, 0xb4, 0xc3, 0x57, 0x38, 0xc8, 0x9f, 0x61, 0x52, 0xff, 0xa9,
	0xeb, 0x7d, 0x45, 0xd5, 0x2b, 0x20, 0xd2, 0xbc, 0x7e, 0x82, 0x39, 0x9a, 0xf7, 0x68, 0xdd, 0xdd,
	0x7c, 0x09, 0x53, 0xcd, 0xff, 0xb8, 0x27, 0x1f, 0xaf, 0xaf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff,
	0x6e, 0x0d, 0x54, 0x5a, 0x67, 0x0b, 0x00, 0x00,
}
