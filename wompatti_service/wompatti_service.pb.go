// Code generated by protoc-gen-go.
// source: wompatti_service.proto
// DO NOT EDIT!

package WompattiService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wompatti service

type WompattiClient interface {
	AddComputer(ctx context.Context, in *AddComputerRequest, opts ...grpc.CallOption) (*AddComputerResponse, error)
	FetchComputers(ctx context.Context, in *FetchComputersRequest, opts ...grpc.CallOption) (Wompatti_FetchComputersClient, error)
	FetchComputerById(ctx context.Context, in *FetchComputerByIdRequest, opts ...grpc.CallOption) (*FetchComputerByIdResponse, error)
	Wakeup(ctx context.Context, in *WakeupRequest, opts ...grpc.CallOption) (*WakeupResponse, error)
}

type wompattiClient struct {
	cc *grpc.ClientConn
}

func NewWompattiClient(cc *grpc.ClientConn) WompattiClient {
	return &wompattiClient{cc}
}

func (c *wompattiClient) AddComputer(ctx context.Context, in *AddComputerRequest, opts ...grpc.CallOption) (*AddComputerResponse, error) {
	out := new(AddComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/addComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchComputers(ctx context.Context, in *FetchComputersRequest, opts ...grpc.CallOption) (Wompatti_FetchComputersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[0], c.cc, "/WompattiService.Wompatti/fetchComputers", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchComputersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchComputersClient interface {
	Recv() (*Computer, error)
	grpc.ClientStream
}

type wompattiFetchComputersClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchComputersClient) Recv() (*Computer, error) {
	m := new(Computer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) FetchComputerById(ctx context.Context, in *FetchComputerByIdRequest, opts ...grpc.CallOption) (*FetchComputerByIdResponse, error) {
	out := new(FetchComputerByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchComputerById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) Wakeup(ctx context.Context, in *WakeupRequest, opts ...grpc.CallOption) (*WakeupResponse, error) {
	out := new(WakeupResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/wakeup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wompatti service

type WompattiServer interface {
	AddComputer(context.Context, *AddComputerRequest) (*AddComputerResponse, error)
	FetchComputers(*FetchComputersRequest, Wompatti_FetchComputersServer) error
	FetchComputerById(context.Context, *FetchComputerByIdRequest) (*FetchComputerByIdResponse, error)
	Wakeup(context.Context, *WakeupRequest) (*WakeupResponse, error)
}

func RegisterWompattiServer(s *grpc.Server, srv WompattiServer) {
	s.RegisterService(&_Wompatti_serviceDesc, srv)
}

func _Wompatti_AddComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).AddComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/AddComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).AddComputer(ctx, req.(*AddComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchComputers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchComputersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchComputers(m, &wompattiFetchComputersServer{stream})
}

type Wompatti_FetchComputersServer interface {
	Send(*Computer) error
	grpc.ServerStream
}

type wompattiFetchComputersServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchComputersServer) Send(m *Computer) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_FetchComputerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchComputerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchComputerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchComputerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchComputerById(ctx, req.(*FetchComputerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_Wakeup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WakeupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).Wakeup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/Wakeup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).Wakeup(ctx, req.(*WakeupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wompatti_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WompattiService.Wompatti",
	HandlerType: (*WompattiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addComputer",
			Handler:    _Wompatti_AddComputer_Handler,
		},
		{
			MethodName: "fetchComputerById",
			Handler:    _Wompatti_FetchComputerById_Handler,
		},
		{
			MethodName: "wakeup",
			Handler:    _Wompatti_Wakeup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "fetchComputers",
			Handler:       _Wompatti_FetchComputers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wompatti_service.proto",
}

func init() { proto.RegisterFile("wompatti_service.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0xcf, 0xcf, 0x2d,
	0x48, 0x2c, 0x29, 0xc9, 0x8c, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0xe2, 0x0f, 0x87, 0x8a, 0x07, 0x43, 0x84, 0xa5, 0xa4, 0x12, 0x53, 0x52, 0xe2,
	0x93, 0xf3, 0x73, 0x0b, 0x4a, 0x4b, 0x52, 0x8b, 0xe2, 0x8b, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x20, 0x8a, 0xa5, 0xa4, 0xd1, 0xe4, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0xa1, 0x26, 0x49, 0xc9, 0xa6,
	0xa5, 0x96, 0x24, 0x67, 0xc0, 0xa5, 0x8b, 0xd1, 0xf4, 0x2a, 0xa1, 0x4a, 0xc7, 0x27, 0x55, 0xc6,
	0x67, 0xa6, 0xa0, 0xa9, 0x51, 0xc6, 0xa1, 0x06, 0xc5, 0x1e, 0x91, 0xf2, 0xc4, 0xec, 0xd4, 0xd2,
	0x02, 0x34, 0xad, 0xa2, 0x70, 0x51, 0x14, 0xc5, 0x7c, 0x30, 0xb3, 0x20, 0x7c, 0xa3, 0x5f, 0x4c,
	0x5c, 0x1c, 0x30, 0x1f, 0x0b, 0x45, 0x71, 0x71, 0x27, 0xa6, 0xa4, 0x38, 0x43, 0x55, 0x08, 0x29,
	0xeb, 0xa1, 0x85, 0x85, 0x9e, 0x23, 0x42, 0x36, 0x08, 0x62, 0x9b, 0x94, 0x0a, 0x7e, 0x45, 0x10,
	0xcb, 0x95, 0x18, 0x84, 0xc2, 0xb9, 0xf8, 0xc0, 0x9e, 0x81, 0x49, 0x15, 0x0b, 0xa9, 0x61, 0xe8,
	0x74, 0x43, 0x51, 0x00, 0xb3, 0x41, 0x12, 0x43, 0x1d, 0x4c, 0x89, 0x12, 0x83, 0x01, 0xa3, 0x50,
	0x0e, 0x97, 0x20, 0x8a, 0xc1, 0x4e, 0x95, 0x9e, 0x29, 0x42, 0x9a, 0xf8, 0xcd, 0x06, 0xa9, 0x81,
	0x19, 0xaf, 0x45, 0x8c, 0x52, 0xb8, 0x37, 0xbc, 0xb9, 0xd8, 0x20, 0x01, 0x2b, 0x24, 0x87, 0xa1,
	0x2f, 0x1c, 0x2c, 0x01, 0x33, 0x57, 0x1e, 0xa7, 0x3c, 0xcc, 0xb0, 0x24, 0x36, 0x70, 0x1c, 0x18,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x33, 0xa1, 0x41, 0x4c, 0x8c, 0x02, 0x00, 0x00,
}
