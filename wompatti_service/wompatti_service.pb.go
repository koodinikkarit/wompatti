// Code generated by protoc-gen-go.
// source: wompatti_service.proto
// DO NOT EDIT!

package WompattiService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wompatti service

type WompattiClient interface {
	// Queries
	FetchComputers(ctx context.Context, in *FetchComputersRequest, opts ...grpc.CallOption) (*ComputersConnection, error)
	FetchComputerById(ctx context.Context, in *FetchComputerByIdRequest, opts ...grpc.CallOption) (*FetchComputerByIdResponse, error)
	FetchDevices(ctx context.Context, in *FetchDevicesRequest, opts ...grpc.CallOption) (*DevicesConnection, error)
	FetchDeviceById(ctx context.Context, in *FetchDeviceByIdRequest, opts ...grpc.CallOption) (*FetchDeviceByIdResponse, error)
	FetchDeviceInfoById(ctx context.Context, in *FetchDeviceInfoByIdRequest, opts ...grpc.CallOption) (*FetchDeviceInfoByIdResponse, error)
	FetchKeyValuesByDeviceInfoId(ctx context.Context, in *FetchKeyValuesByDeviceInfoIdRequest, opts ...grpc.CallOption) (*FetchKeyValuesByDeviceInfoIdResponse, error)
	FetchEthernetInterfaces(ctx context.Context, in *FetchEthernetInterfacesRequest, opts ...grpc.CallOption) (*EthernetInterfacesConnection, error)
	FetchWolInterfaceById(ctx context.Context, in *FetchWolInterfaceByIdRequest, opts ...grpc.CallOption) (*FetchWolInterfaceByIdResponse, error)
	FetchDeviceTypes(ctx context.Context, in *FetchDeviceTypesRequest, opts ...grpc.CallOption) (*DeviceTypesConnection, error)
	FetchDeviceTypeById(ctx context.Context, in *FetchDeviceTypeByIdRequest, opts ...grpc.CallOption) (*FetchDeviceTypeByIdResponse, error)
	FetchCommandsByDeviceTypeId(ctx context.Context, in *FetchCommandsByDeviceTypeIdRequest, opts ...grpc.CallOption) (*FetchCommandsByDeviceTypeIdResponse, error)
	FetchTelnetInterfaces(ctx context.Context, in *FetchTelnetInterfacesRequest, opts ...grpc.CallOption) (*TelnetInterfacesConnection, error)
	FetchTelnetInterfaceById(ctx context.Context, in *FetchTelnetInterfaceByIdRequest, opts ...grpc.CallOption) (*FetchTelnetInterfaceByIdResponse, error)
	FetchSerialInterfaces(ctx context.Context, in *FetchSerialInterfacesRequest, opts ...grpc.CallOption) (*SerialInterfacesConnection, error)
	FetchSerialInterfaceById(ctx context.Context, in *FetchSerialInterfaceByIdRequest, opts ...grpc.CallOption) (*FetchSerialInterfaceByIdResponse, error)
	// Mutations
	CreateComputer(ctx context.Context, in *CreateComputerRequest, opts ...grpc.CallOption) (*CreateComputerResponse, error)
	EditComputer(ctx context.Context, in *EditComputerRequest, opts ...grpc.CallOption) (*EditComputerResponse, error)
	RemoveComputer(ctx context.Context, in *RemoveComputerRequest, opts ...grpc.CallOption) (*RemoveComputerResponse, error)
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	EditDevice(ctx context.Context, in *EditDeviceRequest, opts ...grpc.CallOption) (*EditDeviceResponse, error)
	RemoveDevice(ctx context.Context, in *RemoveDeviceRequest, opts ...grpc.CallOption) (*RemoveDeviceResponse, error)
	CreateDeviceType(ctx context.Context, in *CreateDeviceTypeRequest, opts ...grpc.CallOption) (*CreateDeviceTypeResponse, error)
	EditDeviceType(ctx context.Context, in *EditDeviceTypeRequest, opts ...grpc.CallOption) (*EditDeviceTypeResponse, error)
	RemoveDeviceType(ctx context.Context, in *RemoveDeviceTypeRequest, opts ...grpc.CallOption) (*RemoveDeviceTypeResponse, error)
	CreateCommand(ctx context.Context, in *CreateCommandRequest, opts ...grpc.CallOption) (*CreateCommandResponse, error)
	EditCommand(ctx context.Context, in *EditCommandRequest, opts ...grpc.CallOption) (*EditCommandReponse, error)
	RemoveCommand(ctx context.Context, in *RemoveCommandRequest, opts ...grpc.CallOption) (*RemoveCommandResponse, error)
	CreateKeyValue(ctx context.Context, in *CreateKeyValueRequest, opts ...grpc.CallOption) (*CreateKeyValueResponse, error)
	EditKeyValue(ctx context.Context, in *EditKeyValueRequest, opts ...grpc.CallOption) (*EditKeyValueResponse, error)
	RemoveKeyValue(ctx context.Context, in *RemoveKeyValueRequest, opts ...grpc.CallOption) (*RemoveKeyValueResponse, error)
	CreateWolInterface(ctx context.Context, in *CreateWolInterfaceRequest, opts ...grpc.CallOption) (*CreateWolInterfaceResponse, error)
	EditWolInterface(ctx context.Context, in *EditWolInterfaceRequest, opts ...grpc.CallOption) (*EditWolInterfaceResponse, error)
	RemoveWolInterface(ctx context.Context, in *RemoveWolInterfaceRequest, opts ...grpc.CallOption) (*RemoveWolInterfaceResponse, error)
	ExecuteWolInterface(ctx context.Context, in *ExecuteWolInterfaceRequest, opts ...grpc.CallOption) (*ExecuteWolInterfaceResponse, error)
	CreateTelnetInterface(ctx context.Context, in *CreateTelnetInterfaceRequest, opts ...grpc.CallOption) (*CreateTelnetInterfaceResponse, error)
	EditTelnetInterface(ctx context.Context, in *EditTelnetInterfaceRequest, opts ...grpc.CallOption) (*EditTelnetInterfaceResponse, error)
	RemoveTelnetInterface(ctx context.Context, in *RemoveTelnetInterfaceRequest, opts ...grpc.CallOption) (*RemoveTelnetInterfaceResponse, error)
	CreateSerialInterface(ctx context.Context, in *CreateSerialInterfaceRequest, opts ...grpc.CallOption) (*CreateSerialInterfaceResponse, error)
	EditSerialInterface(ctx context.Context, in *EditSerialInterfaceRequest, opts ...grpc.CallOption) (*EditSerialInterfaceResponse, error)
	RemoveSerialInterface(ctx context.Context, in *RemoveSerialInterfaceRequest, opts ...grpc.CallOption) (*RemoveSerialInterfaceResponse, error)
}

type wompattiClient struct {
	cc *grpc.ClientConn
}

func NewWompattiClient(cc *grpc.ClientConn) WompattiClient {
	return &wompattiClient{cc}
}

func (c *wompattiClient) FetchComputers(ctx context.Context, in *FetchComputersRequest, opts ...grpc.CallOption) (*ComputersConnection, error) {
	out := new(ComputersConnection)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchComputers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchComputerById(ctx context.Context, in *FetchComputerByIdRequest, opts ...grpc.CallOption) (*FetchComputerByIdResponse, error) {
	out := new(FetchComputerByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchComputerById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchDevices(ctx context.Context, in *FetchDevicesRequest, opts ...grpc.CallOption) (*DevicesConnection, error) {
	out := new(DevicesConnection)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchDevices", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchDeviceById(ctx context.Context, in *FetchDeviceByIdRequest, opts ...grpc.CallOption) (*FetchDeviceByIdResponse, error) {
	out := new(FetchDeviceByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchDeviceById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchDeviceInfoById(ctx context.Context, in *FetchDeviceInfoByIdRequest, opts ...grpc.CallOption) (*FetchDeviceInfoByIdResponse, error) {
	out := new(FetchDeviceInfoByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchDeviceInfoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchKeyValuesByDeviceInfoId(ctx context.Context, in *FetchKeyValuesByDeviceInfoIdRequest, opts ...grpc.CallOption) (*FetchKeyValuesByDeviceInfoIdResponse, error) {
	out := new(FetchKeyValuesByDeviceInfoIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchKeyValuesByDeviceInfoId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchEthernetInterfaces(ctx context.Context, in *FetchEthernetInterfacesRequest, opts ...grpc.CallOption) (*EthernetInterfacesConnection, error) {
	out := new(EthernetInterfacesConnection)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchEthernetInterfaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchWolInterfaceById(ctx context.Context, in *FetchWolInterfaceByIdRequest, opts ...grpc.CallOption) (*FetchWolInterfaceByIdResponse, error) {
	out := new(FetchWolInterfaceByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchWolInterfaceById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchDeviceTypes(ctx context.Context, in *FetchDeviceTypesRequest, opts ...grpc.CallOption) (*DeviceTypesConnection, error) {
	out := new(DeviceTypesConnection)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchDeviceTypes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchDeviceTypeById(ctx context.Context, in *FetchDeviceTypeByIdRequest, opts ...grpc.CallOption) (*FetchDeviceTypeByIdResponse, error) {
	out := new(FetchDeviceTypeByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchDeviceTypeById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchCommandsByDeviceTypeId(ctx context.Context, in *FetchCommandsByDeviceTypeIdRequest, opts ...grpc.CallOption) (*FetchCommandsByDeviceTypeIdResponse, error) {
	out := new(FetchCommandsByDeviceTypeIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchCommandsByDeviceTypeId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchTelnetInterfaces(ctx context.Context, in *FetchTelnetInterfacesRequest, opts ...grpc.CallOption) (*TelnetInterfacesConnection, error) {
	out := new(TelnetInterfacesConnection)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchTelnetInterfaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchTelnetInterfaceById(ctx context.Context, in *FetchTelnetInterfaceByIdRequest, opts ...grpc.CallOption) (*FetchTelnetInterfaceByIdResponse, error) {
	out := new(FetchTelnetInterfaceByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchTelnetInterfaceById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchSerialInterfaces(ctx context.Context, in *FetchSerialInterfacesRequest, opts ...grpc.CallOption) (*SerialInterfacesConnection, error) {
	out := new(SerialInterfacesConnection)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchSerialInterfaces", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchSerialInterfaceById(ctx context.Context, in *FetchSerialInterfaceByIdRequest, opts ...grpc.CallOption) (*FetchSerialInterfaceByIdResponse, error) {
	out := new(FetchSerialInterfaceByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchSerialInterfaceById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateComputer(ctx context.Context, in *CreateComputerRequest, opts ...grpc.CallOption) (*CreateComputerResponse, error) {
	out := new(CreateComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditComputer(ctx context.Context, in *EditComputerRequest, opts ...grpc.CallOption) (*EditComputerResponse, error) {
	out := new(EditComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveComputer(ctx context.Context, in *RemoveComputerRequest, opts ...grpc.CallOption) (*RemoveComputerResponse, error) {
	out := new(RemoveComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditDevice(ctx context.Context, in *EditDeviceRequest, opts ...grpc.CallOption) (*EditDeviceResponse, error) {
	out := new(EditDeviceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveDevice(ctx context.Context, in *RemoveDeviceRequest, opts ...grpc.CallOption) (*RemoveDeviceResponse, error) {
	out := new(RemoveDeviceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateDeviceType(ctx context.Context, in *CreateDeviceTypeRequest, opts ...grpc.CallOption) (*CreateDeviceTypeResponse, error) {
	out := new(CreateDeviceTypeResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createDeviceType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditDeviceType(ctx context.Context, in *EditDeviceTypeRequest, opts ...grpc.CallOption) (*EditDeviceTypeResponse, error) {
	out := new(EditDeviceTypeResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editDeviceType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveDeviceType(ctx context.Context, in *RemoveDeviceTypeRequest, opts ...grpc.CallOption) (*RemoveDeviceTypeResponse, error) {
	out := new(RemoveDeviceTypeResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeDeviceType", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateCommand(ctx context.Context, in *CreateCommandRequest, opts ...grpc.CallOption) (*CreateCommandResponse, error) {
	out := new(CreateCommandResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditCommand(ctx context.Context, in *EditCommandRequest, opts ...grpc.CallOption) (*EditCommandReponse, error) {
	out := new(EditCommandReponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveCommand(ctx context.Context, in *RemoveCommandRequest, opts ...grpc.CallOption) (*RemoveCommandResponse, error) {
	out := new(RemoveCommandResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeCommand", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateKeyValue(ctx context.Context, in *CreateKeyValueRequest, opts ...grpc.CallOption) (*CreateKeyValueResponse, error) {
	out := new(CreateKeyValueResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createKeyValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditKeyValue(ctx context.Context, in *EditKeyValueRequest, opts ...grpc.CallOption) (*EditKeyValueResponse, error) {
	out := new(EditKeyValueResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editKeyValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveKeyValue(ctx context.Context, in *RemoveKeyValueRequest, opts ...grpc.CallOption) (*RemoveKeyValueResponse, error) {
	out := new(RemoveKeyValueResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeKeyValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateWolInterface(ctx context.Context, in *CreateWolInterfaceRequest, opts ...grpc.CallOption) (*CreateWolInterfaceResponse, error) {
	out := new(CreateWolInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createWolInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditWolInterface(ctx context.Context, in *EditWolInterfaceRequest, opts ...grpc.CallOption) (*EditWolInterfaceResponse, error) {
	out := new(EditWolInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editWolInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveWolInterface(ctx context.Context, in *RemoveWolInterfaceRequest, opts ...grpc.CallOption) (*RemoveWolInterfaceResponse, error) {
	out := new(RemoveWolInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeWolInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) ExecuteWolInterface(ctx context.Context, in *ExecuteWolInterfaceRequest, opts ...grpc.CallOption) (*ExecuteWolInterfaceResponse, error) {
	out := new(ExecuteWolInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/executeWolInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateTelnetInterface(ctx context.Context, in *CreateTelnetInterfaceRequest, opts ...grpc.CallOption) (*CreateTelnetInterfaceResponse, error) {
	out := new(CreateTelnetInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createTelnetInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditTelnetInterface(ctx context.Context, in *EditTelnetInterfaceRequest, opts ...grpc.CallOption) (*EditTelnetInterfaceResponse, error) {
	out := new(EditTelnetInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editTelnetInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveTelnetInterface(ctx context.Context, in *RemoveTelnetInterfaceRequest, opts ...grpc.CallOption) (*RemoveTelnetInterfaceResponse, error) {
	out := new(RemoveTelnetInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeTelnetInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) CreateSerialInterface(ctx context.Context, in *CreateSerialInterfaceRequest, opts ...grpc.CallOption) (*CreateSerialInterfaceResponse, error) {
	out := new(CreateSerialInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/createSerialInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditSerialInterface(ctx context.Context, in *EditSerialInterfaceRequest, opts ...grpc.CallOption) (*EditSerialInterfaceResponse, error) {
	out := new(EditSerialInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editSerialInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveSerialInterface(ctx context.Context, in *RemoveSerialInterfaceRequest, opts ...grpc.CallOption) (*RemoveSerialInterfaceResponse, error) {
	out := new(RemoveSerialInterfaceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeSerialInterface", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wompatti service

type WompattiServer interface {
	// Queries
	FetchComputers(context.Context, *FetchComputersRequest) (*ComputersConnection, error)
	FetchComputerById(context.Context, *FetchComputerByIdRequest) (*FetchComputerByIdResponse, error)
	FetchDevices(context.Context, *FetchDevicesRequest) (*DevicesConnection, error)
	FetchDeviceById(context.Context, *FetchDeviceByIdRequest) (*FetchDeviceByIdResponse, error)
	FetchDeviceInfoById(context.Context, *FetchDeviceInfoByIdRequest) (*FetchDeviceInfoByIdResponse, error)
	FetchKeyValuesByDeviceInfoId(context.Context, *FetchKeyValuesByDeviceInfoIdRequest) (*FetchKeyValuesByDeviceInfoIdResponse, error)
	FetchEthernetInterfaces(context.Context, *FetchEthernetInterfacesRequest) (*EthernetInterfacesConnection, error)
	FetchWolInterfaceById(context.Context, *FetchWolInterfaceByIdRequest) (*FetchWolInterfaceByIdResponse, error)
	FetchDeviceTypes(context.Context, *FetchDeviceTypesRequest) (*DeviceTypesConnection, error)
	FetchDeviceTypeById(context.Context, *FetchDeviceTypeByIdRequest) (*FetchDeviceTypeByIdResponse, error)
	FetchCommandsByDeviceTypeId(context.Context, *FetchCommandsByDeviceTypeIdRequest) (*FetchCommandsByDeviceTypeIdResponse, error)
	FetchTelnetInterfaces(context.Context, *FetchTelnetInterfacesRequest) (*TelnetInterfacesConnection, error)
	FetchTelnetInterfaceById(context.Context, *FetchTelnetInterfaceByIdRequest) (*FetchTelnetInterfaceByIdResponse, error)
	FetchSerialInterfaces(context.Context, *FetchSerialInterfacesRequest) (*SerialInterfacesConnection, error)
	FetchSerialInterfaceById(context.Context, *FetchSerialInterfaceByIdRequest) (*FetchSerialInterfaceByIdResponse, error)
	// Mutations
	CreateComputer(context.Context, *CreateComputerRequest) (*CreateComputerResponse, error)
	EditComputer(context.Context, *EditComputerRequest) (*EditComputerResponse, error)
	RemoveComputer(context.Context, *RemoveComputerRequest) (*RemoveComputerResponse, error)
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	EditDevice(context.Context, *EditDeviceRequest) (*EditDeviceResponse, error)
	RemoveDevice(context.Context, *RemoveDeviceRequest) (*RemoveDeviceResponse, error)
	CreateDeviceType(context.Context, *CreateDeviceTypeRequest) (*CreateDeviceTypeResponse, error)
	EditDeviceType(context.Context, *EditDeviceTypeRequest) (*EditDeviceTypeResponse, error)
	RemoveDeviceType(context.Context, *RemoveDeviceTypeRequest) (*RemoveDeviceTypeResponse, error)
	CreateCommand(context.Context, *CreateCommandRequest) (*CreateCommandResponse, error)
	EditCommand(context.Context, *EditCommandRequest) (*EditCommandReponse, error)
	RemoveCommand(context.Context, *RemoveCommandRequest) (*RemoveCommandResponse, error)
	CreateKeyValue(context.Context, *CreateKeyValueRequest) (*CreateKeyValueResponse, error)
	EditKeyValue(context.Context, *EditKeyValueRequest) (*EditKeyValueResponse, error)
	RemoveKeyValue(context.Context, *RemoveKeyValueRequest) (*RemoveKeyValueResponse, error)
	CreateWolInterface(context.Context, *CreateWolInterfaceRequest) (*CreateWolInterfaceResponse, error)
	EditWolInterface(context.Context, *EditWolInterfaceRequest) (*EditWolInterfaceResponse, error)
	RemoveWolInterface(context.Context, *RemoveWolInterfaceRequest) (*RemoveWolInterfaceResponse, error)
	ExecuteWolInterface(context.Context, *ExecuteWolInterfaceRequest) (*ExecuteWolInterfaceResponse, error)
	CreateTelnetInterface(context.Context, *CreateTelnetInterfaceRequest) (*CreateTelnetInterfaceResponse, error)
	EditTelnetInterface(context.Context, *EditTelnetInterfaceRequest) (*EditTelnetInterfaceResponse, error)
	RemoveTelnetInterface(context.Context, *RemoveTelnetInterfaceRequest) (*RemoveTelnetInterfaceResponse, error)
	CreateSerialInterface(context.Context, *CreateSerialInterfaceRequest) (*CreateSerialInterfaceResponse, error)
	EditSerialInterface(context.Context, *EditSerialInterfaceRequest) (*EditSerialInterfaceResponse, error)
	RemoveSerialInterface(context.Context, *RemoveSerialInterfaceRequest) (*RemoveSerialInterfaceResponse, error)
}

func RegisterWompattiServer(s *grpc.Server, srv WompattiServer) {
	s.RegisterService(&_Wompatti_serviceDesc, srv)
}

func _Wompatti_FetchComputers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchComputersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchComputers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchComputers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchComputers(ctx, req.(*FetchComputersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchComputerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchComputerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchComputerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchComputerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchComputerById(ctx, req.(*FetchComputerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchDevices(ctx, req.(*FetchDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchDeviceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDeviceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchDeviceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchDeviceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchDeviceById(ctx, req.(*FetchDeviceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchDeviceInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDeviceInfoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchDeviceInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchDeviceInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchDeviceInfoById(ctx, req.(*FetchDeviceInfoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchKeyValuesByDeviceInfoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchKeyValuesByDeviceInfoIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchKeyValuesByDeviceInfoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchKeyValuesByDeviceInfoId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchKeyValuesByDeviceInfoId(ctx, req.(*FetchKeyValuesByDeviceInfoIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchEthernetInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchEthernetInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchEthernetInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchEthernetInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchEthernetInterfaces(ctx, req.(*FetchEthernetInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchWolInterfaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchWolInterfaceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchWolInterfaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchWolInterfaceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchWolInterfaceById(ctx, req.(*FetchWolInterfaceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchDeviceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDeviceTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchDeviceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchDeviceTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchDeviceTypes(ctx, req.(*FetchDeviceTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchDeviceTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDeviceTypeByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchDeviceTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchDeviceTypeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchDeviceTypeById(ctx, req.(*FetchDeviceTypeByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchCommandsByDeviceTypeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCommandsByDeviceTypeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchCommandsByDeviceTypeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchCommandsByDeviceTypeId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchCommandsByDeviceTypeId(ctx, req.(*FetchCommandsByDeviceTypeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchTelnetInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTelnetInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchTelnetInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchTelnetInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchTelnetInterfaces(ctx, req.(*FetchTelnetInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchTelnetInterfaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchTelnetInterfaceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchTelnetInterfaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchTelnetInterfaceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchTelnetInterfaceById(ctx, req.(*FetchTelnetInterfaceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchSerialInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSerialInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchSerialInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchSerialInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchSerialInterfaces(ctx, req.(*FetchSerialInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchSerialInterfaceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSerialInterfaceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchSerialInterfaceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchSerialInterfaceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchSerialInterfaceById(ctx, req.(*FetchSerialInterfaceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateComputer(ctx, req.(*CreateComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditComputer(ctx, req.(*EditComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveComputer(ctx, req.(*RemoveComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditDevice(ctx, req.(*EditDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveDevice(ctx, req.(*RemoveDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateDeviceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateDeviceType(ctx, req.(*CreateDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditDeviceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditDeviceType(ctx, req.(*EditDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveDeviceType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveDeviceType(ctx, req.(*RemoveDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateCommand(ctx, req.(*CreateCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditCommand(ctx, req.(*EditCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveCommand(ctx, req.(*RemoveCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateKeyValue(ctx, req.(*CreateKeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditKeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditKeyValue(ctx, req.(*EditKeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveKeyValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveKeyValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveKeyValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveKeyValue(ctx, req.(*RemoveKeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateWolInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWolInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateWolInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateWolInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateWolInterface(ctx, req.(*CreateWolInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditWolInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditWolInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditWolInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditWolInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditWolInterface(ctx, req.(*EditWolInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveWolInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWolInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveWolInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveWolInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveWolInterface(ctx, req.(*RemoveWolInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_ExecuteWolInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteWolInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).ExecuteWolInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/ExecuteWolInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).ExecuteWolInterface(ctx, req.(*ExecuteWolInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateTelnetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTelnetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateTelnetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateTelnetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateTelnetInterface(ctx, req.(*CreateTelnetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditTelnetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditTelnetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditTelnetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditTelnetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditTelnetInterface(ctx, req.(*EditTelnetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveTelnetInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTelnetInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveTelnetInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveTelnetInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveTelnetInterface(ctx, req.(*RemoveTelnetInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_CreateSerialInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSerialInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).CreateSerialInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/CreateSerialInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).CreateSerialInterface(ctx, req.(*CreateSerialInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditSerialInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditSerialInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditSerialInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditSerialInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditSerialInterface(ctx, req.(*EditSerialInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveSerialInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSerialInterfaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveSerialInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveSerialInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveSerialInterface(ctx, req.(*RemoveSerialInterfaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wompatti_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WompattiService.Wompatti",
	HandlerType: (*WompattiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fetchComputers",
			Handler:    _Wompatti_FetchComputers_Handler,
		},
		{
			MethodName: "fetchComputerById",
			Handler:    _Wompatti_FetchComputerById_Handler,
		},
		{
			MethodName: "fetchDevices",
			Handler:    _Wompatti_FetchDevices_Handler,
		},
		{
			MethodName: "fetchDeviceById",
			Handler:    _Wompatti_FetchDeviceById_Handler,
		},
		{
			MethodName: "fetchDeviceInfoById",
			Handler:    _Wompatti_FetchDeviceInfoById_Handler,
		},
		{
			MethodName: "fetchKeyValuesByDeviceInfoId",
			Handler:    _Wompatti_FetchKeyValuesByDeviceInfoId_Handler,
		},
		{
			MethodName: "fetchEthernetInterfaces",
			Handler:    _Wompatti_FetchEthernetInterfaces_Handler,
		},
		{
			MethodName: "fetchWolInterfaceById",
			Handler:    _Wompatti_FetchWolInterfaceById_Handler,
		},
		{
			MethodName: "fetchDeviceTypes",
			Handler:    _Wompatti_FetchDeviceTypes_Handler,
		},
		{
			MethodName: "fetchDeviceTypeById",
			Handler:    _Wompatti_FetchDeviceTypeById_Handler,
		},
		{
			MethodName: "fetchCommandsByDeviceTypeId",
			Handler:    _Wompatti_FetchCommandsByDeviceTypeId_Handler,
		},
		{
			MethodName: "fetchTelnetInterfaces",
			Handler:    _Wompatti_FetchTelnetInterfaces_Handler,
		},
		{
			MethodName: "fetchTelnetInterfaceById",
			Handler:    _Wompatti_FetchTelnetInterfaceById_Handler,
		},
		{
			MethodName: "fetchSerialInterfaces",
			Handler:    _Wompatti_FetchSerialInterfaces_Handler,
		},
		{
			MethodName: "fetchSerialInterfaceById",
			Handler:    _Wompatti_FetchSerialInterfaceById_Handler,
		},
		{
			MethodName: "createComputer",
			Handler:    _Wompatti_CreateComputer_Handler,
		},
		{
			MethodName: "editComputer",
			Handler:    _Wompatti_EditComputer_Handler,
		},
		{
			MethodName: "removeComputer",
			Handler:    _Wompatti_RemoveComputer_Handler,
		},
		{
			MethodName: "createDevice",
			Handler:    _Wompatti_CreateDevice_Handler,
		},
		{
			MethodName: "editDevice",
			Handler:    _Wompatti_EditDevice_Handler,
		},
		{
			MethodName: "removeDevice",
			Handler:    _Wompatti_RemoveDevice_Handler,
		},
		{
			MethodName: "createDeviceType",
			Handler:    _Wompatti_CreateDeviceType_Handler,
		},
		{
			MethodName: "editDeviceType",
			Handler:    _Wompatti_EditDeviceType_Handler,
		},
		{
			MethodName: "removeDeviceType",
			Handler:    _Wompatti_RemoveDeviceType_Handler,
		},
		{
			MethodName: "createCommand",
			Handler:    _Wompatti_CreateCommand_Handler,
		},
		{
			MethodName: "editCommand",
			Handler:    _Wompatti_EditCommand_Handler,
		},
		{
			MethodName: "removeCommand",
			Handler:    _Wompatti_RemoveCommand_Handler,
		},
		{
			MethodName: "createKeyValue",
			Handler:    _Wompatti_CreateKeyValue_Handler,
		},
		{
			MethodName: "editKeyValue",
			Handler:    _Wompatti_EditKeyValue_Handler,
		},
		{
			MethodName: "removeKeyValue",
			Handler:    _Wompatti_RemoveKeyValue_Handler,
		},
		{
			MethodName: "createWolInterface",
			Handler:    _Wompatti_CreateWolInterface_Handler,
		},
		{
			MethodName: "editWolInterface",
			Handler:    _Wompatti_EditWolInterface_Handler,
		},
		{
			MethodName: "removeWolInterface",
			Handler:    _Wompatti_RemoveWolInterface_Handler,
		},
		{
			MethodName: "executeWolInterface",
			Handler:    _Wompatti_ExecuteWolInterface_Handler,
		},
		{
			MethodName: "createTelnetInterface",
			Handler:    _Wompatti_CreateTelnetInterface_Handler,
		},
		{
			MethodName: "editTelnetInterface",
			Handler:    _Wompatti_EditTelnetInterface_Handler,
		},
		{
			MethodName: "removeTelnetInterface",
			Handler:    _Wompatti_RemoveTelnetInterface_Handler,
		},
		{
			MethodName: "createSerialInterface",
			Handler:    _Wompatti_CreateSerialInterface_Handler,
		},
		{
			MethodName: "editSerialInterface",
			Handler:    _Wompatti_EditSerialInterface_Handler,
		},
		{
			MethodName: "removeSerialInterface",
			Handler:    _Wompatti_RemoveSerialInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wompatti_service.proto",
}

func init() { proto.RegisterFile("wompatti_service.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 874 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x98, 0xdb, 0x4e, 0xdc, 0x3a,
	0x14, 0x86, 0xe1, 0x66, 0x6b, 0xcb, 0xb0, 0x39, 0x18, 0xc1, 0x46, 0xb4, 0x57, 0xc3, 0xf9, 0x34,
	0x3d, 0x40, 0x5f, 0x80, 0x29, 0x95, 0x46, 0xbd, 0x0b, 0xa8, 0xa8, 0x95, 0x2a, 0x48, 0x13, 0x8f,
	0x88, 0x34, 0x93, 0x4c, 0x13, 0x0f, 0x30, 0xea, 0x55, 0x6f, 0x2b, 0xf5, 0xcd, 0xfa, 0x50, 0x55,
	0x9c, 0xd8, 0xe3, 0xc3, 0x5a, 0x71, 0xb8, 0x9c, 0xf8, 0xcb, 0xfa, 0xfd, 0xff, 0xb6, 0x57, 0x0c,
	0x64, 0xe3, 0x31, 0x1b, 0x8d, 0x43, 0xce, 0x93, 0xdb, 0x82, 0xe5, 0x0f, 0x49, 0xc4, 0xba, 0xe3,
	0x3c, 0xe3, 0x19, 0x5d, 0xbe, 0xa9, 0x9f, 0x5f, 0x55, 0x8f, 0xb7, 0x96, 0xa2, 0x6c, 0x34, 0x9e,
	0x70, 0x96, 0x57, 0xc0, 0xd6, 0x6a, 0xcc, 0xca, 0xe7, 0xb7, 0x49, 0x3a, 0xc8, 0xea, 0x47, 0x0b,
	0x61, 0xce, 0xf9, 0xa4, 0xfe, 0xb1, 0x58, 0x8d, 0xd7, 0xbf, 0x36, 0x19, 0xbf, 0x67, 0x79, 0xca,
	0xf8, 0x6d, 0x92, 0x72, 0x96, 0x0f, 0x42, 0x35, 0xb2, 0xf6, 0x98, 0x0d, 0x9d, 0x87, 0xb2, 0x38,
	0x9f, 0x8e, 0xe5, 0xa3, 0x8d, 0x82, 0xe5, 0x49, 0xe8, 0xa2, 0x1b, 0x9c, 0x0d, 0x81, 0xba, 0x6f,
	0xff, 0x74, 0xc8, 0xbf, 0xd2, 0x03, 0xbd, 0x23, 0x4b, 0x03, 0xc6, 0xa3, 0xfb, 0x5e, 0xed, 0xa1,
	0xa0, 0x7b, 0x5d, 0xcb, 0x60, 0xf7, 0x83, 0x01, 0x04, 0xec, 0xfb, 0x84, 0x15, 0x7c, 0x6b, 0xc7,
	0xe1, 0x14, 0xd2, 0xcb, 0xd2, 0x94, 0x45, 0x3c, 0xc9, 0xd2, 0xce, 0x1c, 0x1d, 0x92, 0x55, 0x43,
	0xe1, 0x62, 0xda, 0x8f, 0xe9, 0x61, 0xb3, 0x48, 0xc9, 0x48, 0x9d, 0xa3, 0x36, 0x68, 0x31, 0xce,
	0xd2, 0x82, 0x75, 0xe6, 0xe8, 0x17, 0xb2, 0x28, 0xd4, 0xde, 0x8b, 0x98, 0x0a, 0xba, 0x03, 0xbf,
	0x5d, 0x0f, 0x4b, 0x8d, 0x8e, 0x43, 0xd5, 0x80, 0xe1, 0x64, 0x40, 0x96, 0xb5, 0xda, 0xc2, 0xc7,
	0x7e, 0x53, 0x79, 0xdd, 0xc5, 0x81, 0x1f, 0x54, 0x1e, 0x72, 0xb2, 0xa6, 0xe9, 0xf4, 0xd3, 0x41,
	0x26, 0xb4, 0x8e, 0x9b, 0x4a, 0x48, 0x4a, 0xea, 0x9d, 0xb4, 0x83, 0x95, 0xe6, 0xef, 0x79, 0xf2,
	0x52, 0x88, 0x7e, 0x64, 0xd3, 0x4f, 0xe1, 0x70, 0xc2, 0x8a, 0x8b, 0xe9, 0x0c, 0xee, 0xc7, 0xf4,
	0x1c, 0x2e, 0x88, 0xe0, 0x72, 0x1a, 0xef, 0x9e, 0xf9, 0x96, 0x9a, 0xcf, 0x0f, 0xf2, 0xbf, 0x98,
	0xce, 0x65, 0x7d, 0x3a, 0xfa, 0x72, 0x13, 0x17, 0xf4, 0x15, 0x5c, 0xd3, 0x25, 0xe5, 0x24, 0x4e,
	0x9d, 0x17, 0x5c, 0xd6, 0x58, 0xe8, 0x27, 0xb2, 0x2e, 0xc4, 0x6f, 0xb2, 0xa1, 0x22, 0xc4, 0x12,
	0x9c, 0xc2, 0xd2, 0x36, 0x27, 0x85, 0xbb, 0x6d, 0x71, 0x65, 0x7b, 0x40, 0x56, 0xb4, 0xa5, 0xbf,
	0x9e, 0x8e, 0x59, 0x41, 0x1b, 0xb7, 0x8e, 0x40, 0xa4, 0xde, 0x1e, 0xb2, 0x8d, 0x05, 0x64, 0x38,
	0x34, 0xb7, 0x58, 0x39, 0xee, 0xdf, 0x62, 0x92, 0x6a, 0xb5, 0xc5, 0x66, 0xb0, 0xf2, 0xf6, 0x6b,
	0x9e, 0xbc, 0x90, 0x9d, 0x60, 0x14, 0xa6, 0xb1, 0x5a, 0xfc, 0x92, 0xed, 0xc7, 0xf4, 0x0c, 0x3d,
	0xe8, 0x00, 0x2d, 0x27, 0x71, 0xfe, 0xbc, 0x97, 0xd4, 0x64, 0x26, 0xf5, 0x12, 0x5f, 0x8b, 0x1e,
	0xa9, 0xed, 0x2e, 0x64, 0x89, 0x6d, 0x4e, 0xea, 0xbb, 0x89, 0xd9, 0xa4, 0x91, 0xfb, 0xcf, 0x79,
	0xb2, 0x09, 0xe9, 0x8a, 0xf4, 0x5f, 0xb7, 0x92, 0xd6, 0x97, 0xe0, 0xcd, 0x33, 0xde, 0x70, 0xac,
	0x5f, 0x89, 0xcf, 0x86, 0xdf, 0xba, 0xcd, 0xe1, 0xd6, 0x6d, 0x12, 0xb6, 0x6e, 0x51, 0x4d, 0xd6,
	0x01, 0xd4, 0x63, 0x1d, 0x7c, 0x43, 0x59, 0x8f, 0xc8, 0x52, 0x94, 0xb3, 0x90, 0x33, 0xf9, 0xf5,
	0x00, 0xbe, 0x76, 0x3d, 0x03, 0x90, 0x72, 0xfb, 0x5e, 0x4e, 0x89, 0x7c, 0x25, 0x8b, 0x2c, 0x4e,
	0xb8, 0x92, 0x70, 0x3f, 0x41, 0x97, 0xda, 0xb0, 0x14, 0xd8, 0xf5, 0x50, 0xba, 0x87, 0x9c, 0x8d,
	0xb2, 0x87, 0x26, 0x0f, 0x81, 0x01, 0xe0, 0x1e, 0x6c, 0x4e, 0xf7, 0x50, 0x05, 0x55, 0x1d, 0x1f,
	0xc0, 0x43, 0x4f, 0x1b, 0xc6, 0x3d, 0x98, 0x94, 0x2a, 0x7f, 0x43, 0x48, 0x19, 0x51, 0x5d, 0xbc,
	0x03, 0x5a, 0x37, 0x4b, 0x6f, 0x37, 0x32, 0xfa, 0xbc, 0xab, 0x70, 0xd0, 0x79, 0x07, 0xda, 0x30,
	0x3e, 0x6f, 0x93, 0x52, 0xe5, 0x13, 0xb2, 0xa2, 0xc7, 0x52, 0x76, 0x15, 0xa0, 0x3d, 0xf7, 0x2c,
	0x44, 0xca, 0x1c, 0xb6, 0x20, 0xf5, 0x65, 0x9e, 0x45, 0x24, 0x84, 0xf6, 0x1a, 0x22, 0xd0, 0x65,
	0xf6, 0xbd, 0x9c, 0xee, 0x47, 0x8f, 0x0b, 0xf1, 0x13, 0x58, 0x08, 0xee, 0xc7, 0x25, 0x95, 0xd4,
	0x1d, 0xf9, 0x4f, 0x1d, 0xbd, 0xb2, 0x35, 0xd3, 0x5d, 0xfc, 0x44, 0x95, 0xe3, 0xf8, 0x37, 0xcd,
	0xc2, 0x94, 0xc2, 0x67, 0xb2, 0x50, 0x9f, 0x3b, 0x51, 0x7f, 0x1b, 0x3b, 0x50, 0x7a, 0x75, 0x0f,
	0xa4, 0x4d, 0x5e, 0x9d, 0x39, 0x64, 0xf2, 0x81, 0x3e, 0x8e, 0x4f, 0xde, 0xc2, 0xdc, 0xce, 0x24,
	0xaf, 0x46, 0x68, 0x67, 0x92, 0x80, 0xaf, 0x33, 0xcd, 0x38, 0xbb, 0x33, 0x29, 0x09, 0xb8, 0x33,
	0xd9, 0x02, 0xbb, 0x1e, 0xca, 0xed, 0x4c, 0x0d, 0x1e, 0x02, 0x03, 0xf0, 0x75, 0x26, 0x40, 0x24,
	0x23, 0xb4, 0x0a, 0x4a, 0xbf, 0x45, 0xd1, 0x23, 0x24, 0x04, 0x1d, 0xc2, 0xbf, 0x5b, 0x10, 0xab,
	0x9f, 0x91, 0x32, 0x34, 0x43, 0xee, 0x00, 0x8c, 0x04, 0x12, 0x3b, 0x6c, 0x41, 0xea, 0xde, 0xaa,
	0x00, 0x3d, 0xde, 0x02, 0x07, 0xc2, 0xbd, 0x41, 0xac, 0xfe, 0x97, 0x06, 0x7b, 0x62, 0xd1, 0xc4,
	0x4a, 0xd3, 0xad, 0x72, 0xe9, 0x52, 0xf8, 0x35, 0x10, 0x84, 0x95, 0xe6, 0x13, 0x59, 0xaf, 0x16,
	0xd0, 0xba, 0xa5, 0x00, 0xd7, 0x8f, 0x1e, 0xc4, 0xe1, 0x97, 0x6b, 0x04, 0x37, 0xdc, 0xc6, 0x09,
	0xb7, 0x75, 0x8f, 0xc1, 0x25, 0x42, 0x54, 0x4f, 0xda, 0xc1, 0xba, 0xdb, 0x6a, 0x49, 0xfd, 0x6e,
	0x03, 0x88, 0xc3, 0xdd, 0x22, 0xb8, 0x9b, 0xb3, 0x75, 0x25, 0x42, 0x73, 0xb6, 0x38, 0x5f, 0xce,
	0x0e, 0x6e, 0xe7, 0x6c, 0xeb, 0xc2, 0x39, 0x23, 0xaa, 0x27, 0xed, 0x60, 0x37, 0x67, 0xbf, 0xdb,
	0x00, 0xe2, 0x7c, 0x39, 0xa3, 0xca, 0xdf, 0xfe, 0x11, 0xff, 0x55, 0x39, 0xfb, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x19, 0x13, 0x3c, 0x64, 0x30, 0x12, 0x00, 0x00,
}
