// Code generated by protoc-gen-go.
// source: wompatti_service.proto
// DO NOT EDIT!

package WompattiService

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Wompatti service

type WompattiClient interface {
	AddComputer(ctx context.Context, in *AddComputerRequest, opts ...grpc.CallOption) (*AddComputerResponse, error)
	FetchComputers(ctx context.Context, in *FetchComputersRequest, opts ...grpc.CallOption) (Wompatti_FetchComputersClient, error)
	FetchComputerById(ctx context.Context, in *FetchComputerByIdRequest, opts ...grpc.CallOption) (*FetchComputerByIdResponse, error)
	Wakeup(ctx context.Context, in *WakeupRequest, opts ...grpc.CallOption) (*WakeupResponse, error)
	EditComputer(ctx context.Context, in *EditComputerRequest, opts ...grpc.CallOption) (*EditComputerResponse, error)
	RemoveComputer(ctx context.Context, in *RemoveComputerRequest, opts ...grpc.CallOption) (*RemoveComputerResponse, error)
	AddKeijo(ctx context.Context, in *AddKeijoRequest, opts ...grpc.CallOption) (*AddKeijoResponse, error)
	EditKeijo(ctx context.Context, in *EditKeijoRequest, opts ...grpc.CallOption) (*EditKeijoResponse, error)
	RemoveKeijo(ctx context.Context, in *RemoveKeijoRequest, opts ...grpc.CallOption) (*RemoveKeijoResponse, error)
	FetchKeijos(ctx context.Context, in *FetchKeijosRequest, opts ...grpc.CallOption) (Wompatti_FetchKeijosClient, error)
	FetchKeijoById(ctx context.Context, in *FetchKeijoByIdRequest, opts ...grpc.CallOption) (*FetchKeijoByIdResponse, error)
	TurnOnCecDevice(ctx context.Context, in *TurnOnCecDeviceRequest, opts ...grpc.CallOption) (*TurnOnCecDeviceResponse, error)
	ChangeKeijoSource(ctx context.Context, in *ChangeKeijoSourceRequest, opts ...grpc.CallOption) (*ChangeKeijoSourceResponse, error)
	ShutDownCecDevice(ctx context.Context, in *ShutDownCecDeviceRequest, opts ...grpc.CallOption) (*ShutDownCecDeviceResponse, error)
	FetchCecDevicePowerStatusByKeijoId(ctx context.Context, in *FetchCecDevicePowerStatusByKeijoIdRequest, opts ...grpc.CallOption) (*FetchCecDevicePowerStatusByKeijoIdResponse, error)
	FetchCecTvDeviceSourceByKeijoId(ctx context.Context, in *FetchCecTvDeviceSourceByKeijoIdRequest, opts ...grpc.CallOption) (*FetchCecTvDeviceSourceByKeijoIdResponse, error)
}

type wompattiClient struct {
	cc *grpc.ClientConn
}

func NewWompattiClient(cc *grpc.ClientConn) WompattiClient {
	return &wompattiClient{cc}
}

func (c *wompattiClient) AddComputer(ctx context.Context, in *AddComputerRequest, opts ...grpc.CallOption) (*AddComputerResponse, error) {
	out := new(AddComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/addComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchComputers(ctx context.Context, in *FetchComputersRequest, opts ...grpc.CallOption) (Wompatti_FetchComputersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[0], c.cc, "/WompattiService.Wompatti/fetchComputers", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchComputersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchComputersClient interface {
	Recv() (*Computer, error)
	grpc.ClientStream
}

type wompattiFetchComputersClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchComputersClient) Recv() (*Computer, error) {
	m := new(Computer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) FetchComputerById(ctx context.Context, in *FetchComputerByIdRequest, opts ...grpc.CallOption) (*FetchComputerByIdResponse, error) {
	out := new(FetchComputerByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchComputerById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) Wakeup(ctx context.Context, in *WakeupRequest, opts ...grpc.CallOption) (*WakeupResponse, error) {
	out := new(WakeupResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/wakeup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditComputer(ctx context.Context, in *EditComputerRequest, opts ...grpc.CallOption) (*EditComputerResponse, error) {
	out := new(EditComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveComputer(ctx context.Context, in *RemoveComputerRequest, opts ...grpc.CallOption) (*RemoveComputerResponse, error) {
	out := new(RemoveComputerResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeComputer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) AddKeijo(ctx context.Context, in *AddKeijoRequest, opts ...grpc.CallOption) (*AddKeijoResponse, error) {
	out := new(AddKeijoResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/addKeijo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) EditKeijo(ctx context.Context, in *EditKeijoRequest, opts ...grpc.CallOption) (*EditKeijoResponse, error) {
	out := new(EditKeijoResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/editKeijo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) RemoveKeijo(ctx context.Context, in *RemoveKeijoRequest, opts ...grpc.CallOption) (*RemoveKeijoResponse, error) {
	out := new(RemoveKeijoResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/removeKeijo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchKeijos(ctx context.Context, in *FetchKeijosRequest, opts ...grpc.CallOption) (Wompatti_FetchKeijosClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Wompatti_serviceDesc.Streams[1], c.cc, "/WompattiService.Wompatti/fetchKeijos", opts...)
	if err != nil {
		return nil, err
	}
	x := &wompattiFetchKeijosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Wompatti_FetchKeijosClient interface {
	Recv() (*Keijo, error)
	grpc.ClientStream
}

type wompattiFetchKeijosClient struct {
	grpc.ClientStream
}

func (x *wompattiFetchKeijosClient) Recv() (*Keijo, error) {
	m := new(Keijo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *wompattiClient) FetchKeijoById(ctx context.Context, in *FetchKeijoByIdRequest, opts ...grpc.CallOption) (*FetchKeijoByIdResponse, error) {
	out := new(FetchKeijoByIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchKeijoById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) TurnOnCecDevice(ctx context.Context, in *TurnOnCecDeviceRequest, opts ...grpc.CallOption) (*TurnOnCecDeviceResponse, error) {
	out := new(TurnOnCecDeviceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/turnOnCecDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) ChangeKeijoSource(ctx context.Context, in *ChangeKeijoSourceRequest, opts ...grpc.CallOption) (*ChangeKeijoSourceResponse, error) {
	out := new(ChangeKeijoSourceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/changeKeijoSource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) ShutDownCecDevice(ctx context.Context, in *ShutDownCecDeviceRequest, opts ...grpc.CallOption) (*ShutDownCecDeviceResponse, error) {
	out := new(ShutDownCecDeviceResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/shutDownCecDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchCecDevicePowerStatusByKeijoId(ctx context.Context, in *FetchCecDevicePowerStatusByKeijoIdRequest, opts ...grpc.CallOption) (*FetchCecDevicePowerStatusByKeijoIdResponse, error) {
	out := new(FetchCecDevicePowerStatusByKeijoIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchCecDevicePowerStatusByKeijoId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wompattiClient) FetchCecTvDeviceSourceByKeijoId(ctx context.Context, in *FetchCecTvDeviceSourceByKeijoIdRequest, opts ...grpc.CallOption) (*FetchCecTvDeviceSourceByKeijoIdResponse, error) {
	out := new(FetchCecTvDeviceSourceByKeijoIdResponse)
	err := grpc.Invoke(ctx, "/WompattiService.Wompatti/fetchCecTvDeviceSourceByKeijoId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Wompatti service

type WompattiServer interface {
	AddComputer(context.Context, *AddComputerRequest) (*AddComputerResponse, error)
	FetchComputers(*FetchComputersRequest, Wompatti_FetchComputersServer) error
	FetchComputerById(context.Context, *FetchComputerByIdRequest) (*FetchComputerByIdResponse, error)
	Wakeup(context.Context, *WakeupRequest) (*WakeupResponse, error)
	EditComputer(context.Context, *EditComputerRequest) (*EditComputerResponse, error)
	RemoveComputer(context.Context, *RemoveComputerRequest) (*RemoveComputerResponse, error)
	AddKeijo(context.Context, *AddKeijoRequest) (*AddKeijoResponse, error)
	EditKeijo(context.Context, *EditKeijoRequest) (*EditKeijoResponse, error)
	RemoveKeijo(context.Context, *RemoveKeijoRequest) (*RemoveKeijoResponse, error)
	FetchKeijos(*FetchKeijosRequest, Wompatti_FetchKeijosServer) error
	FetchKeijoById(context.Context, *FetchKeijoByIdRequest) (*FetchKeijoByIdResponse, error)
	TurnOnCecDevice(context.Context, *TurnOnCecDeviceRequest) (*TurnOnCecDeviceResponse, error)
	ChangeKeijoSource(context.Context, *ChangeKeijoSourceRequest) (*ChangeKeijoSourceResponse, error)
	ShutDownCecDevice(context.Context, *ShutDownCecDeviceRequest) (*ShutDownCecDeviceResponse, error)
	FetchCecDevicePowerStatusByKeijoId(context.Context, *FetchCecDevicePowerStatusByKeijoIdRequest) (*FetchCecDevicePowerStatusByKeijoIdResponse, error)
	FetchCecTvDeviceSourceByKeijoId(context.Context, *FetchCecTvDeviceSourceByKeijoIdRequest) (*FetchCecTvDeviceSourceByKeijoIdResponse, error)
}

func RegisterWompattiServer(s *grpc.Server, srv WompattiServer) {
	s.RegisterService(&_Wompatti_serviceDesc, srv)
}

func _Wompatti_AddComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).AddComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/AddComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).AddComputer(ctx, req.(*AddComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchComputers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchComputersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchComputers(m, &wompattiFetchComputersServer{stream})
}

type Wompatti_FetchComputersServer interface {
	Send(*Computer) error
	grpc.ServerStream
}

type wompattiFetchComputersServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchComputersServer) Send(m *Computer) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_FetchComputerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchComputerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchComputerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchComputerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchComputerById(ctx, req.(*FetchComputerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_Wakeup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WakeupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).Wakeup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/Wakeup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).Wakeup(ctx, req.(*WakeupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditComputer(ctx, req.(*EditComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveComputer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveComputerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveComputer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveComputer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveComputer(ctx, req.(*RemoveComputerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_AddKeijo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddKeijoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).AddKeijo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/AddKeijo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).AddKeijo(ctx, req.(*AddKeijoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_EditKeijo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditKeijoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).EditKeijo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/EditKeijo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).EditKeijo(ctx, req.(*EditKeijoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_RemoveKeijo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveKeijoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).RemoveKeijo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/RemoveKeijo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).RemoveKeijo(ctx, req.(*RemoveKeijoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchKeijos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchKeijosRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WompattiServer).FetchKeijos(m, &wompattiFetchKeijosServer{stream})
}

type Wompatti_FetchKeijosServer interface {
	Send(*Keijo) error
	grpc.ServerStream
}

type wompattiFetchKeijosServer struct {
	grpc.ServerStream
}

func (x *wompattiFetchKeijosServer) Send(m *Keijo) error {
	return x.ServerStream.SendMsg(m)
}

func _Wompatti_FetchKeijoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchKeijoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchKeijoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchKeijoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchKeijoById(ctx, req.(*FetchKeijoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_TurnOnCecDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnOnCecDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).TurnOnCecDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/TurnOnCecDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).TurnOnCecDevice(ctx, req.(*TurnOnCecDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_ChangeKeijoSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeKeijoSourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).ChangeKeijoSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/ChangeKeijoSource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).ChangeKeijoSource(ctx, req.(*ChangeKeijoSourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_ShutDownCecDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutDownCecDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).ShutDownCecDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/ShutDownCecDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).ShutDownCecDevice(ctx, req.(*ShutDownCecDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchCecDevicePowerStatusByKeijoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCecDevicePowerStatusByKeijoIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchCecDevicePowerStatusByKeijoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchCecDevicePowerStatusByKeijoId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchCecDevicePowerStatusByKeijoId(ctx, req.(*FetchCecDevicePowerStatusByKeijoIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wompatti_FetchCecTvDeviceSourceByKeijoId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCecTvDeviceSourceByKeijoIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WompattiServer).FetchCecTvDeviceSourceByKeijoId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WompattiService.Wompatti/FetchCecTvDeviceSourceByKeijoId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WompattiServer).FetchCecTvDeviceSourceByKeijoId(ctx, req.(*FetchCecTvDeviceSourceByKeijoIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wompatti_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WompattiService.Wompatti",
	HandlerType: (*WompattiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addComputer",
			Handler:    _Wompatti_AddComputer_Handler,
		},
		{
			MethodName: "fetchComputerById",
			Handler:    _Wompatti_FetchComputerById_Handler,
		},
		{
			MethodName: "wakeup",
			Handler:    _Wompatti_Wakeup_Handler,
		},
		{
			MethodName: "editComputer",
			Handler:    _Wompatti_EditComputer_Handler,
		},
		{
			MethodName: "removeComputer",
			Handler:    _Wompatti_RemoveComputer_Handler,
		},
		{
			MethodName: "addKeijo",
			Handler:    _Wompatti_AddKeijo_Handler,
		},
		{
			MethodName: "editKeijo",
			Handler:    _Wompatti_EditKeijo_Handler,
		},
		{
			MethodName: "removeKeijo",
			Handler:    _Wompatti_RemoveKeijo_Handler,
		},
		{
			MethodName: "fetchKeijoById",
			Handler:    _Wompatti_FetchKeijoById_Handler,
		},
		{
			MethodName: "turnOnCecDevice",
			Handler:    _Wompatti_TurnOnCecDevice_Handler,
		},
		{
			MethodName: "changeKeijoSource",
			Handler:    _Wompatti_ChangeKeijoSource_Handler,
		},
		{
			MethodName: "shutDownCecDevice",
			Handler:    _Wompatti_ShutDownCecDevice_Handler,
		},
		{
			MethodName: "fetchCecDevicePowerStatusByKeijoId",
			Handler:    _Wompatti_FetchCecDevicePowerStatusByKeijoId_Handler,
		},
		{
			MethodName: "fetchCecTvDeviceSourceByKeijoId",
			Handler:    _Wompatti_FetchCecTvDeviceSourceByKeijoId_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "fetchComputers",
			Handler:       _Wompatti_FetchComputers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "fetchKeijos",
			Handler:       _Wompatti_FetchKeijos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wompatti_service.proto",
}

func init() { proto.RegisterFile("wompatti_service.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 547 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0xd7, 0x97, 0x69, 0xb8, 0x53, 0xa7, 0x59, 0x30, 0x89, 0x0c, 0x18, 0x6b, 0xc7, 0x06,
	0x3c, 0x54, 0x08, 0x1e, 0x40, 0xf0, 0xc4, 0x3a, 0x26, 0x4d, 0x93, 0xf8, 0xb3, 0x56, 0xaa, 0x34,
	0x09, 0x45, 0x59, 0xec, 0xd1, 0xb0, 0xb5, 0x0e, 0xb1, 0xd3, 0xaa, 0x5f, 0x84, 0x57, 0x3e, 0x26,
	0xaf, 0x28, 0x76, 0xee, 0x6d, 0x9d, 0xc4, 0x29, 0xf0, 0x58, 0x9f, 0xdf, 0x3d, 0xe7, 0xfa, 0xe6,
	0xa6, 0x21, 0x3b, 0x33, 0x31, 0x8e, 0x03, 0xa5, 0x22, 0x5f, 0xf2, 0x64, 0x1a, 0x85, 0xbc, 0x1b,
	0x27, 0x42, 0x09, 0xba, 0x35, 0xcc, 0xcf, 0xfb, 0xe6, 0xd8, 0xf3, 0x02, 0xc6, 0xfc, 0x50, 0x8c,
	0xe3, 0x54, 0xf1, 0xc4, 0x4f, 0xf8, 0x8f, 0x94, 0x4b, 0x65, 0x60, 0x6f, 0xb7, 0xa0, 0xc9, 0x58,
	0x4c, 0x64, 0xee, 0xe4, 0x3d, 0xbc, 0xe6, 0x2a, 0x1c, 0xa1, 0x2c, 0x0b, 0xb5, 0x6d, 0x5b, 0xf6,
	0xaf, 0xe6, 0x7e, 0xc4, 0x0a, 0x4c, 0xc7, 0xc1, 0x58, 0x39, 0x77, 0x67, 0xc1, 0x0d, 0x4f, 0xe3,
	0x42, 0xe9, 0x3d, 0x3c, 0xb5, 0xe0, 0x5d, 0xce, 0x22, 0xe5, 0xba, 0xce, 0x83, 0xa2, 0x68, 0x95,
	0xb6, 0x40, 0xc8, 0x7f, 0x37, 0x6f, 0x78, 0xf4, 0x5d, 0x98, 0x1f, 0x2f, 0x7f, 0x6f, 0x92, 0x0d,
	0x98, 0x1c, 0xbd, 0x24, 0xcd, 0x80, 0xb1, 0x5e, 0x8e, 0xd3, 0x4e, 0xb7, 0x30, 0xd3, 0xee, 0xfb,
	0x85, 0x7a, 0x61, 0x3a, 0xf0, 0x0e, 0xea, 0x21, 0xd3, 0x49, 0x7b, 0x8d, 0x0e, 0x49, 0x4b, 0x0f,
	0x05, 0x24, 0x49, 0x0f, 0x4b, 0x95, 0xa7, 0x16, 0x00, 0x09, 0xf7, 0x4b, 0x1c, 0x20, 0xed, 0xb5,
	0x17, 0x0d, 0x7a, 0x4b, 0xb6, 0x2d, 0xe3, 0xe3, 0xf9, 0x19, 0xa3, 0xcf, 0xea, 0xbd, 0x33, 0x06,
	0xec, 0x9f, 0xff, 0x0d, 0x8a, 0xd7, 0x38, 0x27, 0xeb, 0xe6, 0x01, 0xd1, 0x47, 0xa5, 0xba, 0xa1,
	0x16, 0xc0, 0x77, 0xcf, 0xa9, 0xa3, 0xd9, 0x57, 0xb2, 0x99, 0x3d, 0x39, 0x1c, 0x78, 0x79, 0x96,
	0x1f, 0x96, 0x64, 0x30, 0x7e, 0xb2, 0x82, 0x42, 0xfb, 0x90, 0xb4, 0x12, 0x3e, 0x16, 0x53, 0x8e,
	0x01, 0xe5, 0x91, 0x5f, 0x58, 0x00, 0x44, 0x1c, 0xad, 0xe4, 0x30, 0xe4, 0x0b, 0xd9, 0x08, 0x18,
	0x3b, 0xcf, 0x56, 0x8a, 0x3e, 0xae, 0xda, 0x05, 0x2d, 0x81, 0xf1, 0x7e, 0x0d, 0x81, 0x96, 0x03,
	0x72, 0x27, 0x1b, 0x8b, 0xf1, 0xdc, 0xaf, 0xbc, 0xad, 0x65, 0xda, 0xae, 0x43, 0xd0, 0xf5, 0x92,
	0x34, 0xcd, 0x34, 0x8c, 0x6f, 0xc7, 0x71, 0x45, 0xcb, 0xf9, 0xa0, 0x1e, 0x42, 0xef, 0x8f, 0xa4,
	0xa9, 0x77, 0x50, 0x9f, 0xcb, 0x0a, 0xef, 0xd3, 0x85, 0x0a, 0xde, 0x3b, 0x25, 0x48, 0xeb, 0x7a,
	0xa7, 0xc3, 0xfc, 0x65, 0xd1, 0x27, 0x7a, 0xa1, 0x0f, 0x6b, 0x2c, 0x97, 0xb7, 0xf9, 0x68, 0x25,
	0x87, 0x4d, 0x5f, 0x93, 0x2d, 0x95, 0x26, 0x93, 0x4f, 0x93, 0x1e, 0x0f, 0x4f, 0x78, 0xc6, 0xd2,
	0x72, 0xf5, 0xc0, 0x26, 0x20, 0xe6, 0xe9, 0x6a, 0x10, 0x73, 0x6e, 0xc9, 0x76, 0x38, 0x0a, 0x26,
	0xdf, 0xcc, 0xd4, 0xfa, 0x22, 0x4d, 0x42, 0x5e, 0xf1, 0x82, 0xf6, 0x8a, 0x8c, 0xfb, 0x05, 0xad,
	0x40, 0x97, 0xd3, 0xe4, 0x28, 0x55, 0x27, 0x62, 0xb6, 0x74, 0xaf, 0x72, 0x5a, 0xbf, 0xc8, 0xb8,
	0xd3, 0x2a, 0x50, 0x4c, 0xfb, 0xd5, 0x20, 0xe6, 0x7b, 0x80, 0xe2, 0x67, 0x31, 0xe3, 0x49, 0x5f,
	0x05, 0x2a, 0x95, 0xc7, 0x73, 0xdd, 0xe2, 0x19, 0xa3, 0x6f, 0x1d, 0xff, 0x31, 0x75, 0x45, 0xd0,
	0xd0, 0xbb, 0xff, 0xaa, 0xc5, 0x0e, 0x7f, 0x36, 0xc8, 0x1e, 0x74, 0x38, 0x98, 0x9a, 0x12, 0x33,
	0xb4, 0x45, 0x7b, 0xaf, 0x9d, 0x11, 0x8e, 0x0a, 0xe8, 0xed, 0xcd, 0xbf, 0x17, 0x42, 0x63, 0x57,
	0xeb, 0xfa, 0x03, 0xf4, 0xea, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x56, 0x8b, 0xc0, 0x73, 0xd1,
	0x07, 0x00, 0x00,
}
